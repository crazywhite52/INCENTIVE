{"ast":null,"code":"import _classCallCheck from \"D:\\\\Work_Project\\\\ReactJs\\\\JIB-Quicktron\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Work_Project\\\\ReactJs\\\\JIB-Quicktron\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Work_Project\\\\ReactJs\\\\JIB-Quicktron\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Work_Project\\\\ReactJs\\\\JIB-Quicktron\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Work_Project\\\\ReactJs\\\\JIB-Quicktron\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\Work_Project\\\\ReactJs\\\\JIB-Quicktron\\\\src\\\\components\\\\start\\\\tb_jqx_search.tsx\";\nimport * as React from 'react';\nimport JqxGrid, { jqx } from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxgrid';\nimport \"jqwidgets-scripts/jqwidgets/styles/jqx.base.css\";\nimport \"jqwidgets-scripts/jqwidgets/styles/jqx.material-purple.css\";\nimport \"jqwidgets-scripts/jqwidgets/styles/jqx.metrodark.css\";\n\nvar Tb_jqx_serach =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(Tb_jqx_serach, _React$PureComponent);\n\n  function Tb_jqx_serach() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Tb_jqx_serach);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Tb_jqx_serach)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.myGrid = React.createRef();\n    return _this;\n  }\n\n  _createClass(Tb_jqx_serach, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      // const imagerenderer = (row: number, datafield: string, value: string): string => {\n      //     return '<img style=\"margin-left: 5px;\" alt=\"img null\" height=\"100%\" width=\"100%\" src=\"' + value + '\"/>';\n      // };\n      var data = this.props.Adata;\n      var source = {\n        datafields: [{\n          name: '_id',\n          type: 'string'\n        }, {\n          name: 'type',\n          type: 'string'\n        }, {\n          name: 'desc',\n          type: 'string'\n        }, {\n          name: 'status',\n          type: 'string'\n        }, {\n          name: 'comment',\n          type: 'string'\n        }, {\n          name: 'volumn',\n          type: 'string'\n        }, {\n          name: 'width',\n          type: 'string'\n        }, {\n          name: 'height',\n          type: 'string'\n        }, {\n          name: 'leng',\n          type: 'string'\n        }, {\n          name: 'image',\n          type: 'string'\n        }],\n        datatype: 'array',\n        localdata: data\n      };\n      var columns = [{\n        text: 'Image',\n        datafield: 'image',\n        align: 'center',\n        columntype: 'button',\n        width: 115,\n        sortable: false,\n        filterable: false,\n        cellsrenderer: function cellsrenderer() {\n          return \"ดูรูป\";\n        },\n        buttonclick: function buttonclick(row) {\n          var value = _this2.myGrid.current.getrowdata(row);\n\n          _this2.props.op(true, value.image);\n        }\n      }, {\n        text: '',\n        align: 'center',\n        columntype: 'button',\n        sortable: false,\n        filterable: false,\n        width: 100,\n        cellsrenderer: function cellsrenderer() {\n          return \"แก้ไข\";\n        },\n        buttonclick: function buttonclick(row) {\n          var value = _this2.myGrid.current.getrowdata(row);\n\n          alert(value._id);\n        }\n      }, {\n        text: '_id',\n        datafield: '_id',\n        hidden: true,\n        align: 'center',\n        width: 150\n      }, {\n        text: 'type',\n        datafield: 'type',\n        filtertype: 'checkedlist',\n        align: 'center',\n        width: 150\n      }, {\n        text: 'desc',\n        datafield: 'desc',\n        align: 'center',\n        width: '30%'\n      }, {\n        text: 'status',\n        datafield: 'status',\n        hidden: true,\n        align: 'center',\n        width: 150\n      }, {\n        text: 'comment',\n        datafield: 'comment',\n        align: 'center',\n        width: '30%'\n      }, {\n        text: 'width',\n        datafield: 'width',\n        width: 55\n      }, {\n        text: 'height',\n        datafield: 'height',\n        width: 55\n      }, {\n        text: 'length',\n        datafield: 'leng',\n        width: 55\n      }, {\n        text: 'volumn',\n        datafield: 'volumn',\n        align: 'center',\n        width: 200\n      }];\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(JqxGrid //rowsheight={60}\n      // @ts-ignore\n      , {\n        ref: this.myGrid,\n        filterable: true,\n        statusbarheight: 30,\n        showaggregates: true,\n        selectionmode: 'singlecell',\n        theme: \"metrodark\",\n        pageable: true,\n        pagesize: 20,\n        pagesizeoptions: ['10', '20', '30', '50', '100'],\n        columnsreorder: true,\n        showfilterrow: true,\n        height: 700,\n        width: '100%',\n        source: new jqx.dataAdapter(source),\n        columns: columns,\n        columnsresize: true,\n        sortable: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Tb_jqx_serach;\n}(React.PureComponent);\n\nexport default Tb_jqx_serach;","map":{"version":3,"sources":["D:\\Work_Project\\ReactJs\\JIB-Quicktron\\src\\components\\start\\tb_jqx_search.tsx"],"names":["React","JqxGrid","jqx","Tb_jqx_serach","myGrid","createRef","data","props","Adata","source","datafields","name","type","datatype","localdata","columns","text","datafield","align","columntype","width","sortable","filterable","cellsrenderer","buttonclick","row","value","current","getrowdata","op","image","alert","_id","hidden","filtertype","dataAdapter","PureComponent"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport JqxGrid, { IGridProps, jqx } from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxgrid';\r\nimport \"jqwidgets-scripts/jqwidgets/styles/jqx.base.css\";\r\nimport \"jqwidgets-scripts/jqwidgets/styles/jqx.material-purple.css\";\r\nimport \"jqwidgets-scripts/jqwidgets/styles/jqx.metrodark.css\";\r\n\r\n\r\n\r\nclass Tb_jqx_serach extends React.PureComponent<any, IGridProps> {\r\n    private myGrid = React.createRef<JqxGrid>();\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    public render() {\r\n        // const imagerenderer = (row: number, datafield: string, value: string): string => {\r\n        //     return '<img style=\"margin-left: 5px;\" alt=\"img null\" height=\"100%\" width=\"100%\" src=\"' + value + '\"/>';\r\n        // };\r\n        const data = this.props.Adata;\r\n        const source: any = {\r\n            datafields: [\r\n                { name: '_id', type: 'string' },\r\n                { name: 'type', type: 'string' },\r\n                { name: 'desc', type: 'string' },\r\n                { name: 'status', type: 'string' },\r\n                { name: 'comment', type: 'string' },\r\n                { name: 'volumn', type: 'string' },\r\n                { name: 'width', type: 'string' },\r\n                { name: 'height', type: 'string' },\r\n                { name: 'leng', type: 'string' },\r\n                { name: 'image', type: 'string' }\r\n\r\n            ],\r\n            datatype: 'array',\r\n            localdata: data\r\n        };\r\n        const columns: any = [\r\n            {\r\n                text: 'Image', datafield: 'image', align: 'center', columntype: 'button', width: 115, sortable: false, filterable: false, cellsrenderer: function () {\r\n                    return \"ดูรูป\";},buttonclick: (row: number): void => {\r\n                    let value = this.myGrid.current!.getrowdata(row);\r\n                    this.props.op(true,value.image);\r\n                   \r\n\r\n                }\r\n            },\r\n            {\r\n                text: '', align: 'center', columntype: 'button', sortable: false, filterable: false, width: 100, cellsrenderer: function () {\r\n                    return \"แก้ไข\";\r\n                }, buttonclick: (row: number): void => {\r\n                    let value = this.myGrid.current!.getrowdata(row);\r\n                    alert(value._id);\r\n                }\r\n            },\r\n            { text: '_id', datafield: '_id', hidden: true, align: 'center', width: 150 },\r\n            { text: 'type', datafield: 'type', filtertype: 'checkedlist', align: 'center', width: 150 },\r\n            { text: 'desc', datafield: 'desc', align: 'center', width: '30%' },\r\n            { text: 'status', datafield: 'status', hidden: true, align: 'center', width: 150 },\r\n            { text: 'comment', datafield: 'comment', align: 'center', width: '30%' },\r\n            { text: 'width', datafield: 'width', width: 55 },\r\n            { text: 'height', datafield: 'height', width: 55 },\r\n            { text: 'length', datafield: 'leng', width: 55 },\r\n            { text: 'volumn', datafield: 'volumn', align: 'center', width: 200 }\r\n        ]\r\n\r\n\r\n        return (\r\n            <div>\r\n                <JqxGrid\r\n                    //rowsheight={60}\r\n                    // @ts-ignore\r\n                    ref={this.myGrid}\r\n                    filterable={true}\r\n                    statusbarheight={30}\r\n                    showaggregates={true}\r\n                    selectionmode={'singlecell'}\r\n                    theme=\"metrodark\"\r\n                    pageable={true}\r\n                    pagesize={20}\r\n                    pagesizeoptions={['10', '20', '30', '50', '100']}\r\n                    columnsreorder={true}\r\n                    showfilterrow={true}\r\n                    height={700}\r\n                    width={'100%'} source={new jqx.dataAdapter(source)} columns={columns}\r\n                    columnsresize={true} sortable={true} />\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\nexport default Tb_jqx_serach;"]},"metadata":{},"sourceType":"module"}