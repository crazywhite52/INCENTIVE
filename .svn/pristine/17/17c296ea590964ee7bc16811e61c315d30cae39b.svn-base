{"ast":null,"code":"import _classCallCheck from \"D:\\\\Work_Project\\\\ReactJs\\\\NewIncentive2020\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Work_Project\\\\ReactJs\\\\NewIncentive2020\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Work_Project\\\\ReactJs\\\\NewIncentive2020\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Work_Project\\\\ReactJs\\\\NewIncentive2020\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Work_Project\\\\ReactJs\\\\NewIncentive2020\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\Work_Project\\\\ReactJs\\\\NewIncentive2020\\\\src\\\\components\\\\settingsys\\\\type.tsx\";\nimport React from \"react\";\nimport \"jqwidgets-scripts/jqwidgets/styles/jqx.base.css\";\nimport \"jqwidgets-scripts/jqwidgets/styles/jqx.material-purple.css\";\nimport \"jqwidgets-scripts/jqwidgets/styles/jqx.metrodark.css\";\nimport JqxGrid, { jqx } from \"jqwidgets-scripts/jqwidgets-react-tsx/jqxgrid\";\n\nvar Type =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(Type, _React$PureComponent);\n\n  function Type(props) {\n    var _this;\n\n    _classCallCheck(this, Type);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Type).call(this, props));\n    _this.myGrid = React.createRef();\n    return _this;\n  }\n\n  _createClass(Type, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var cellsrenderer = function cellsrenderer(row, columnfield, value, defaulthtml, columnproperties, rowdata) {\n        if (value === 0) {\n          return '<div style=\"overflow:hidden;text-overflow:ellipsis;padding-bottom:2px;text-align:center;margin-right:2px;margin-left:4px;margin-top:4px;color:red;\"><strong>' + value + '</strong></div>';\n        } else {\n          return '<div style=\"overflow:hidden;text-overflow:ellipsis;padding-bottom:2px;text-align:center;margin-right:2px;margin-left:4px;margin-top:4px;color:green;\"><strong>' + value + '</strong></div>';\n        }\n      };\n\n      var columns = [{\n        text: 'รหัส',\n        pinned: true,\n        editable: false,\n        datafield: 'id',\n        cellsalign: 'center',\n        align: 'center',\n        width: '5%'\n      }, {\n        text: 'ชื่อ-นามสกุล',\n        editable: false,\n        datafield: 'fname',\n        align: 'center',\n        cellsalign: 'center',\n        width: '15%'\n      }, {\n        text: 'ชื่อเล่น',\n        editable: false,\n        datafield: 'nickname',\n        align: 'center',\n        cellsalign: 'center',\n        width: '5%'\n      }, {\n        text: 'โทรศัพท์',\n        editable: false,\n        datafield: 'tel',\n        align: 'center',\n        cellsalign: 'center',\n        width: '10%'\n      }, {\n        text: 'สถานที่',\n        editable: false,\n        datafield: 'locationname',\n        align: 'center',\n        cellsalign: 'center',\n        width: '15%'\n      }, {\n        text: 'หน้าที่',\n        editable: false,\n        datafield: 'job',\n        align: 'center',\n        cellsalign: 'center',\n        width: '15%'\n      }, {\n        text: 'ส่วนงาน',\n        editable: false,\n        datafield: 'branch',\n        align: 'center',\n        cellsalign: 'center',\n        width: '15%'\n      }, {\n        text: 'ประเภท',\n        editable: false,\n        datafield: 'status',\n        align: 'center',\n        cellsalign: 'center',\n        width: '10%'\n      }, {\n        text: '',\n        align: 'center',\n        columntype: 'button',\n        buttonclick: function buttonclick(row) {\n          _this2.props.updateModal(_this2.myGrid.current.getrowdata(row));\n        },\n        cellsrenderer: function cellsrenderer() {\n          return 'แก้ไข';\n        },\n        cellsalign: 'center',\n        width: '5%'\n      }, {\n        text: '',\n        align: 'center',\n        columntype: 'button',\n        buttonclick: function buttonclick(row) {\n          var data = _this2.myGrid.current.getrowdata(row);\n\n          var result = confirm(\"คุณยืนยัน ที่จะลบข้อมูลของ \" + data.id);\n\n          _this2.myGrid.current.clearselection();\n\n          if (result === true) {\n            _this2.props.deldata(data);\n          } // this.props.updateModal(this.myGrid.current!.getrowdata(row));\n\n        },\n        cellsrenderer: function cellsrenderer() {\n          return 'ลบ';\n        },\n        cellsalign: 'center',\n        width: '5%',\n        aggregates: ['count']\n      }];\n      var source = {\n        datafields: [{\n          name: 'id',\n          type: 'string'\n        }, {\n          name: 'fname',\n          type: 'string'\n        }, {\n          name: 'nickname',\n          type: 'string'\n        }, {\n          name: 'tel',\n          type: 'string'\n        }, // { name: 'worktime', type: 'string' },\n        {\n          name: 'locationname',\n          type: 'string'\n        }, {\n          name: 'job',\n          type: 'string'\n        }, {\n          name: 'branch',\n          type: 'string'\n        }, {\n          name: 'status',\n          type: 'string'\n        }],\n        datatype: 'array',\n        localdata: this.props.dataPon,\n        updaterow: function updaterow(rowid, rowdata, commit) {\n          // this.props.onUpdatedata(rowdata);\n          commit(true);\n        }\n      };\n      return React.createElement(JqxGrid, {\n        ref: this.myGrid,\n        theme: \"metrodark\",\n        width: '95%',\n        source: new jqx.dataAdapter(source),\n        columns: columns,\n        showstatusbar: true,\n        showaggregates: true,\n        pageable: true,\n        autoheight: false,\n        sortable: false,\n        altrows: false,\n        editmode: 'click',\n        height: 450,\n        enabletooltips: true,\n        editable: true,\n        selectionmode: 'singlerow',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Type;\n}(React.PureComponent);\n\nexport default Type;","map":{"version":3,"sources":["D:\\Work_Project\\ReactJs\\NewIncentive2020\\src\\components\\settingsys\\type.tsx"],"names":["React","JqxGrid","jqx","Type","props","myGrid","createRef","cellsrenderer","row","columnfield","value","defaulthtml","columnproperties","rowdata","columns","text","pinned","editable","datafield","cellsalign","align","width","columntype","buttonclick","updateModal","current","getrowdata","data","result","confirm","id","clearselection","deldata","aggregates","source","datafields","name","type","datatype","localdata","dataPon","updaterow","rowid","commit","dataAdapter","PureComponent"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"jqwidgets-scripts/jqwidgets/styles/jqx.base.css\";\r\nimport \"jqwidgets-scripts/jqwidgets/styles/jqx.material-purple.css\";\r\nimport \"jqwidgets-scripts/jqwidgets/styles/jqx.metrodark.css\";\r\n\r\nimport JqxGrid, {\r\n  IGridProps,\r\n  jqx\r\n} from \"jqwidgets-scripts/jqwidgets-react-tsx/jqxgrid\";\r\nclass Type extends React.PureComponent<any, IGridProps> {\r\n  private myGrid = React.createRef<JqxGrid>();\r\n  constructor(props: any) {\r\n      super(props);\r\n  }\r\n \r\n  public render() {\r\n    const cellsrenderer = (row: number, columnfield: string, value: string | number, defaulthtml: string, columnproperties: any, rowdata: any): string => {\r\n        if (value === 0) {\r\n            return '<div style=\"overflow:hidden;text-overflow:ellipsis;padding-bottom:2px;text-align:center;margin-right:2px;margin-left:4px;margin-top:4px;color:red;\"><strong>'+value+'</strong></div>';\r\n        }\r\n        else {\r\n            return '<div style=\"overflow:hidden;text-overflow:ellipsis;padding-bottom:2px;text-align:center;margin-right:2px;margin-left:4px;margin-top:4px;color:green;\"><strong>'+value+'</strong></div>';\r\n        }\r\n    };\r\n    const columns: any =[\r\n        { text: 'รหัส', pinned: true, editable: false,  datafield: 'id', cellsalign: 'center',align: 'center', width: '5%' },\r\n        { text: 'ชื่อ-นามสกุล',editable: false, datafield: 'fname', align: 'center', cellsalign: 'center',width: '15%' },\r\n        { text: 'ชื่อเล่น',editable: false, datafield: 'nickname', align: 'center', cellsalign: 'center',width: '5%' },\r\n        { text: 'โทรศัพท์',editable: false, datafield: 'tel', align: 'center', cellsalign: 'center',width: '10%' },\r\n        { text: 'สถานที่',editable: false, datafield: 'locationname', align: 'center', cellsalign: 'center',width: '15%' },\r\n        { text: 'หน้าที่',editable: false, datafield: 'job', align: 'center', cellsalign: 'center',width: '15%' },\r\n        { text: 'ส่วนงาน',editable: false, datafield: 'branch', align: 'center', cellsalign: 'center',width: '15%' },\r\n        { text: 'ประเภท',editable: false, datafield: 'status', align: 'center', cellsalign: 'center',width: '10%' },\r\n        { text: '',  align: 'center',columntype:'button',buttonclick: (row: number): void => {\r\n\r\n          this.props.updateModal(this.myGrid.current!.getrowdata(row));\r\n          \r\n      },cellsrenderer: (): string => {\r\n          return 'แก้ไข';\r\n      }, cellsalign: 'center',width: '5%' },\r\n        { text: '',  align: 'center',columntype:'button', buttonclick: (row: number): void => {\r\n          let data = this.myGrid.current!.getrowdata(row);\r\n          var result = confirm(\"คุณยืนยัน ที่จะลบข้อมูลของ \"+data.id);\r\n          this.myGrid.current!.clearselection();\r\n          if(result===true){\r\n            this.props.deldata(data);\r\n          }\r\n          // this.props.updateModal(this.myGrid.current!.getrowdata(row));\r\n          \r\n      },cellsrenderer: (): string => {\r\n          return 'ลบ';\r\n      }, cellsalign: 'center',width: '5%',aggregates: ['count'] },\r\n    ]\r\n    const source: any = {\r\n      datafields: [\r\n          { name: 'id', type: 'string' },\r\n          { name: 'fname', type: 'string' },\r\n          { name: 'nickname', type: 'string' },\r\n          { name: 'tel', type: 'string' },\r\n          // { name: 'worktime', type: 'string' },\r\n          { name: 'locationname', type: 'string' },\r\n          { name: 'job', type: 'string' },\r\n          { name: 'branch', type: 'string' },\r\n          { name: 'status', type: 'string' },\r\n      ],\r\n      datatype: 'array',\r\n      localdata:this.props.dataPon,\r\n      updaterow: (rowid: any, rowdata: any, commit: any): void => {\r\n        // this.props.onUpdatedata(rowdata);\r\n        commit(true);\r\n    }\r\n  };\r\n      return (\r\n        <JqxGrid\r\n              ref={this.myGrid}\r\n              theme=\"metrodark\"\r\n              width={'95%'} source={new jqx.dataAdapter(source)} columns={columns}\r\n              showstatusbar={true} showaggregates={true}\r\n              pageable={true} autoheight={false} sortable={false} altrows={false}\r\n              editmode ={'click'} height={450}\r\n              enabletooltips={true} editable={true} selectionmode={'singlerow'}\r\n        />\r\n      );\r\n  }\r\n}\r\nexport default Type;"]},"metadata":{},"sourceType":"module"}