{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport { compose } from 'recompose';\nimport { InfiniteScroll } from '../InfiniteScroll';\nimport { TableRow } from '../TableRow';\nimport { TableCell } from '../TableCell';\nimport { Keyboard } from '../Keyboard';\nimport { withFocus, withForwardRef } from '../hocs';\nimport { Cell } from './Cell';\nimport { StyledDataTableBody, StyledDataTableRow } from './StyledDataTable';\n\nvar Body = function Body(_ref) {\n  var columns = _ref.columns,\n      data = _ref.data,\n      forwardRef = _ref.forwardRef,\n      onMore = _ref.onMore,\n      onClickRow = _ref.onClickRow,\n      primaryProperty = _ref.primaryProperty,\n      size = _ref.size,\n      step = _ref.step,\n      theme = _ref.theme,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"columns\", \"data\", \"forwardRef\", \"onMore\", \"onClickRow\", \"primaryProperty\", \"size\", \"step\", \"theme\"]);\n\n  var _React$useState = React.useState(),\n      active = _React$useState[0],\n      setActive = _React$useState[1];\n\n  return React.createElement(Keyboard, {\n    onEnter: onClickRow && active >= 0 ? function (event) {\n      event.persist();\n      var adjustedEvent = event;\n      adjustedEvent.datum = data[active];\n      onClickRow(adjustedEvent);\n    } : undefined,\n    onUp: onClickRow && active ? function () {\n      setActive(active - 1);\n    } : undefined,\n    onDown: onClickRow && data.length ? function () {\n      setActive(active >= 0 ? Math.min(active + 1, data.length - 1) : 0);\n    } : undefined\n  }, React.createElement(StyledDataTableBody, _extends({\n    ref: forwardRef,\n    size: size,\n    tabIndex: onClickRow ? 0 : undefined\n  }, rest), React.createElement(InfiniteScroll, {\n    items: data,\n    onMore: onMore,\n    renderMarker: function renderMarker(marker) {\n      return React.createElement(TableRow, null, React.createElement(TableCell, null, marker));\n    },\n    scrollableAncestor: \"window\",\n    step: step\n  }, function (datum, index) {\n    return React.createElement(StyledDataTableRow, {\n      key: datum[primaryProperty],\n      size: size,\n      active: active >= 0 ? active === index : undefined,\n      onClick: onClickRow ? function (event) {\n        event.persist(); // extract from React's synthetic event pool\n\n        var adjustedEvent = event;\n        adjustedEvent.datum = datum;\n        onClickRow(adjustedEvent);\n      } : undefined,\n      onMouseOver: onClickRow ? function () {\n        return setActive(undefined);\n      } : undefined,\n      onFocus: onClickRow ? function () {} : undefined\n    }, columns.map(function (column) {\n      return React.createElement(Cell, {\n        key: column.property,\n        context: \"body\",\n        column: column,\n        datum: datum,\n        primaryProperty: primaryProperty,\n        scope: column.primary || column.property === primaryProperty ? 'row' : undefined\n      });\n    }));\n  })));\n};\n\nvar ButtonWrapper = compose(withFocus(), withForwardRef)(Body);\nexport { ButtonWrapper as Body };","map":null,"metadata":{},"sourceType":"module"}