{"ast":null,"code":"import _classCallCheck from \"D:\\\\Work_Project\\\\ReactJs\\\\NewIncentive2020\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Work_Project\\\\ReactJs\\\\NewIncentive2020\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Work_Project\\\\ReactJs\\\\NewIncentive2020\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Work_Project\\\\ReactJs\\\\NewIncentive2020\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Work_Project\\\\ReactJs\\\\NewIncentive2020\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\Work_Project\\\\ReactJs\\\\NewIncentive2020\\\\src\\\\components\\\\settingsys\\\\band.tsx\";\nimport React from \"react\";\nimport \"jqwidgets-scripts/jqwidgets/styles/jqx.base.css\";\nimport \"jqwidgets-scripts/jqwidgets/styles/jqx.material-purple.css\";\nimport \"jqwidgets-scripts/jqwidgets/styles/jqx.metrodark.css\";\nimport JqxGrid, { jqx } from \"jqwidgets-scripts/jqwidgets-react-tsx/jqxgrid\";\n\nvar Band =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(Band, _React$PureComponent);\n\n  function Band(props) {\n    var _this;\n\n    _classCallCheck(this, Band);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Band).call(this, props));\n    _this.myGrid = React.createRef();\n    return _this;\n  }\n\n  _createClass(Band, [{\n    key: \"render\",\n    value: function render() {\n      var cellsrenderer = function cellsrenderer(row, columnfield, value, defaulthtml, columnproperties, rowdata) {\n        if (value === 0) {\n          return '<div style=\"overflow:hidden;text-overflow:ellipsis;padding-bottom:2px;text-align:center;margin-right:2px;margin-left:4px;margin-top:4px;color:red;\"><strong>' + value + '</strong></div>';\n        } else {\n          return '<div style=\"overflow:hidden;text-overflow:ellipsis;padding-bottom:2px;text-align:center;margin-right:2px;margin-left:4px;margin-top:4px;color:green;\"><strong>' + value + '</strong></div>';\n        }\n      };\n\n      var columns = [{\n        text: 'แบนด์',\n        pinned: true,\n        editable: false,\n        datafield: 'brand',\n        cellsalign: 'center',\n        align: 'center',\n        width: '30%'\n      }, {\n        text: 'สถานะ',\n        pinned: true,\n        editable: false,\n        datafield: 'status',\n        cellsalign: 'center',\n        align: 'center',\n        width: '20%'\n      }];\n      var source = {\n        datafields: [{\n          name: 'brand',\n          type: 'string'\n        }, {\n          name: 'status',\n          type: 'string'\n        }],\n        datatype: 'array',\n        localdata: this.props.dataPon,\n        updaterow: function updaterow(rowid, rowdata, commit) {\n          // this.props.onUpdatedata(rowdata);\n          commit(true);\n        }\n      };\n      return React.createElement(JqxGrid, {\n        ref: this.myGrid,\n        theme: \"metrodark\",\n        width: '99%',\n        source: new jqx.dataAdapter(source),\n        columns: columns,\n        showstatusbar: true,\n        showaggregates: true //   pageable={true} autoheight={false} sortable={false} altrows={false}\n        ,\n        editmode: 'click',\n        height: 450,\n        enabletooltips: true,\n        editable: true,\n        selectionmode: 'singlerow',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Band;\n}(React.PureComponent);\n\nexport default Band;","map":{"version":3,"sources":["D:\\Work_Project\\ReactJs\\NewIncentive2020\\src\\components\\settingsys\\band.tsx"],"names":["React","JqxGrid","jqx","Band","props","myGrid","createRef","cellsrenderer","row","columnfield","value","defaulthtml","columnproperties","rowdata","columns","text","pinned","editable","datafield","cellsalign","align","width","source","datafields","name","type","datatype","localdata","dataPon","updaterow","rowid","commit","dataAdapter","PureComponent"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAiC,OAAjC;AACA,OAAO,iDAAP;AACA,OAAO,4DAAP;AACA,OAAO,sDAAP;AAEA,OAAOC,OAAP,IAEEC,GAFF,QAGO,+CAHP;;IAIMC,I;;;;;AAEJ,gBAAYC,KAAZ,EAAwB;AAAA;;AAAA;;AACpB,8EAAMA,KAAN;AADoB,UADhBC,MACgB,GADPL,KAAK,CAACM,SAAN,EACO;AAAA;AAEvB;;;;6BAEe;AACd,UAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,GAAD,EAAcC,WAAd,EAAmCC,KAAnC,EAA2DC,WAA3D,EAAgFC,gBAAhF,EAAuGC,OAAvG,EAAgI;AAClJ,YAAIH,KAAK,KAAK,CAAd,EAAiB;AACb,iBAAO,iKAA+JA,KAA/J,GAAqK,iBAA5K;AACH,SAFD,MAGK;AACD,iBAAO,mKAAiKA,KAAjK,GAAuK,iBAA9K;AACH;AACJ,OAPD;;AAQA,UAAMI,OAAY,GAAE,CAChB;AAAEC,QAAAA,IAAI,EAAE,OAAR;AAAiBC,QAAAA,MAAM,EAAE,IAAzB;AAA+BC,QAAAA,QAAQ,EAAE,KAAzC;AAAiDC,QAAAA,SAAS,EAAE,OAA5D;AAAqEC,QAAAA,UAAU,EAAE,QAAjF;AAA0FC,QAAAA,KAAK,EAAE,QAAjG;AAA2GC,QAAAA,KAAK,EAAE;AAAlH,OADgB,EAEhB;AAAEN,QAAAA,IAAI,EAAE,OAAR;AAAiBC,QAAAA,MAAM,EAAE,IAAzB;AAA+BC,QAAAA,QAAQ,EAAE,KAAzC;AAAiDC,QAAAA,SAAS,EAAE,QAA5D;AAAsEC,QAAAA,UAAU,EAAE,QAAlF;AAA2FC,QAAAA,KAAK,EAAE,QAAlG;AAA4GC,QAAAA,KAAK,EAAE;AAAnH,OAFgB,CAApB;AAMA,UAAMC,MAAW,GAAG;AAClBC,QAAAA,UAAU,EAAE,CACR;AAAEC,UAAAA,IAAI,EAAE,OAAR;AAAiBC,UAAAA,IAAI,EAAE;AAAvB,SADQ,EAER;AAAED,UAAAA,IAAI,EAAE,QAAR;AAAkBC,UAAAA,IAAI,EAAE;AAAxB,SAFQ,CADM;AAOlBC,QAAAA,QAAQ,EAAE,OAPQ;AAQlBC,QAAAA,SAAS,EAAC,KAAKvB,KAAL,CAAWwB,OARH;AASlBC,QAAAA,SAAS,EAAE,mBAACC,KAAD,EAAajB,OAAb,EAA2BkB,MAA3B,EAAiD;AAC1D;AACAA,UAAAA,MAAM,CAAC,IAAD,CAAN;AACH;AAZmB,OAApB;AAcE,aACE,oBAAC,OAAD;AACM,QAAA,GAAG,EAAE,KAAK1B,MADhB;AAEM,QAAA,KAAK,EAAC,WAFZ;AAGM,QAAA,KAAK,EAAE,KAHb;AAGoB,QAAA,MAAM,EAAE,IAAIH,GAAG,CAAC8B,WAAR,CAAoBV,MAApB,CAH5B;AAGyD,QAAA,OAAO,EAAER,OAHlE;AAIM,QAAA,aAAa,EAAE,IAJrB;AAI2B,QAAA,cAAc,EAAE,IAJ3C,CAKI;AALJ;AAMM,QAAA,QAAQ,EAAG,OANjB;AAM0B,QAAA,MAAM,EAAE,GANlC;AAOM,QAAA,cAAc,EAAE,IAPtB;AAO4B,QAAA,QAAQ,EAAE,IAPtC;AAO4C,QAAA,aAAa,EAAE,WAP3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAWH;;;;EA9CgBd,KAAK,CAACiC,a;;AAgDzB,eAAe9B,IAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"jqwidgets-scripts/jqwidgets/styles/jqx.base.css\";\r\nimport \"jqwidgets-scripts/jqwidgets/styles/jqx.material-purple.css\";\r\nimport \"jqwidgets-scripts/jqwidgets/styles/jqx.metrodark.css\";\r\n\r\nimport JqxGrid, {\r\n  IGridProps,\r\n  jqx\r\n} from \"jqwidgets-scripts/jqwidgets-react-tsx/jqxgrid\";\r\nclass Band extends React.PureComponent<any, IGridProps> {\r\n  private myGrid = React.createRef<JqxGrid>();\r\n  constructor(props: any) {\r\n      super(props);\r\n  }\r\n \r\n  public render() {\r\n    const cellsrenderer = (row: number, columnfield: string, value: string | number, defaulthtml: string, columnproperties: any, rowdata: any): string => {\r\n        if (value === 0) {\r\n            return '<div style=\"overflow:hidden;text-overflow:ellipsis;padding-bottom:2px;text-align:center;margin-right:2px;margin-left:4px;margin-top:4px;color:red;\"><strong>'+value+'</strong></div>';\r\n        }\r\n        else {\r\n            return '<div style=\"overflow:hidden;text-overflow:ellipsis;padding-bottom:2px;text-align:center;margin-right:2px;margin-left:4px;margin-top:4px;color:green;\"><strong>'+value+'</strong></div>';\r\n        }\r\n    };\r\n    const columns: any =[\r\n        { text: 'แบนด์', pinned: true, editable: false,  datafield: 'brand', cellsalign: 'center',align: 'center', width: '30%' },\r\n        { text: 'สถานะ', pinned: true, editable: false,  datafield: 'status', cellsalign: 'center',align: 'center', width: '20%' },\r\n        // { text: 'Details',editable: false, datafield: 'detail', align: 'center', cellsalign: 'center',width: '50%' },\r\n      \r\n    ]\r\n    const source: any = {\r\n      datafields: [\r\n          { name: 'brand', type: 'string' },\r\n          { name: 'status', type: 'string' },\r\n        //   { name: 'detail', type: 'string' },\r\n         \r\n      ],\r\n      datatype: 'array',\r\n      localdata:this.props.dataPon,\r\n      updaterow: (rowid: any, rowdata: any, commit: any): void => {\r\n        // this.props.onUpdatedata(rowdata);\r\n        commit(true);\r\n    }\r\n  };\r\n      return (\r\n        <JqxGrid\r\n              ref={this.myGrid}\r\n              theme=\"metrodark\"\r\n              width={'99%'} source={new jqx.dataAdapter(source)} columns={columns}\r\n              showstatusbar={true} showaggregates={true}\r\n            //   pageable={true} autoheight={false} sortable={false} altrows={false}\r\n              editmode ={'click'} height={450}\r\n              enabletooltips={true} editable={true} selectionmode={'singlerow'}\r\n        />\r\n      );\r\n  }\r\n}\r\nexport default Band;"]},"metadata":{},"sourceType":"module"}