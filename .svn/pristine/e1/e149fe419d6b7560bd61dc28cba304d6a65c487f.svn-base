{"ast":null,"code":"import _classCallCheck from \"D:\\\\Work_Project\\\\ReactJs\\\\JIB-Quicktron\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Work_Project\\\\ReactJs\\\\JIB-Quicktron\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\nvar sha512 = require(\"js-sha512\");\n\nvar ApiService =\n/*#__PURE__*/\nfunction () {\n  function ApiService() {\n    _classCallCheck(this, ApiService);\n\n    this.GetSecretUpdate = this.GetSecretUpdate.bind(this);\n    this.IPAdress = \"http://172.18.0.162\";\n    this.PortAddress = \"9500\";\n    this.user = \"jibmis\";\n    this.jobid = \"0123456789\";\n    this.password = \"JIBmis2020**\";\n  }\n\n  _createClass(ApiService, [{\n    key: \"GetSecretUpdate\",\n    value: function GetSecretUpdate() {\n      var now = new Date();\n      var day = (\"0\" + now.getDate()).slice(-2);\n      var month = (\"0\" + (now.getMonth() + 1)).slice(-2);\n      var years = now.getFullYear();\n      var hours = now.getHours();\n      var fullday = years + month + day + hours;\n      var fullmath = \"**JIB//\" + this.password + \"//\" + fullday + \"**\";\n      var secret = sha512(fullmath);\n      console.log(fullmath);\n      console.log(secret);\n      return secret;\n    }\n  }, {\n    key: \"AuthenTest\",\n    value: function AuthenTest() {\n      // example\n      var test = Array();\n      test = {\n        connection: true,\n        access: true\n      };\n\n      try {\n        var pathname = \"/authtest\";\n        var options = {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            user: this.user,\n            secret: this.GetSecretUpdate(),\n            jobid: this.jobid\n          },\n          body: JSON.stringify(test)\n        };\n        var links = this.IPAdress + \":\" + this.PortAddress + pathname;\n        return fetch(links, options).then(function (response) {\n          return response.json();\n        }).then(function (responseData) {\n          return Promise.resolve(responseData);\n        });\n      } catch (err) {\n        return err;\n      }\n    } // SPACE\n\n  }, {\n    key: \"searchSpace\",\n    value: function searchSpace(params) {\n      // example\n      // let params  = Array();\n      // params = {\n      //   type: \"MIS01\",\n      //   status: true,\n      //   volumn:100\n      // };\n      try {\n        var pathname = \"/space/searchSpace?\";\n\n        if (typeof params.type != \"undefined\") {\n          pathname = pathname + \"type=\" + params.type + \"&\";\n        }\n\n        if (typeof params.status != \"undefined\") {\n          pathname = pathname + \"status=\" + params.status + \"&\";\n        }\n\n        if (typeof params.volumn != \"undefined\") {\n          pathname = pathname + \"volumn=\" + params.volumn + \"&\";\n        }\n\n        var options = {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            user: this.user,\n            secret: this.GetSecretUpdate(),\n            jobid: this.jobid // body: []\n\n          }\n        };\n        var links = this.IPAdress + \":\" + this.PortAddress + pathname;\n        return fetch(links, options).then(function (response) {\n          return response.json();\n        }).then(function (responseData) {\n          return Promise.resolve(responseData);\n        });\n      } catch (err) {\n        return err;\n      }\n    }\n  }, {\n    key: \"willCreateSpace\",\n    value: function willCreateSpace() {\n      try {\n        var pathname = \"/space/willCreateSpace\";\n        var options = {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            user: this.user,\n            secret: this.GetSecretUpdate(),\n            jobid: this.jobid // body: []\n\n          }\n        };\n        var links = this.IPAdress + \":\" + this.PortAddress + pathname;\n        return fetch(links, options).then(function (response) {\n          return response.json();\n        }).then(function (responseData) {\n          return Promise.resolve(responseData);\n        });\n      } catch (err) {\n        return err;\n      }\n    }\n  }, {\n    key: \"imageList\",\n    value: function imageList() {\n      try {\n        var pathname = \"/space/image_list\";\n        var options = {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            user: this.user,\n            secret: this.GetSecretUpdate(),\n            jobid: this.jobid // body: []\n\n          }\n        };\n        var links = this.IPAdress + \":\" + this.PortAddress + pathname;\n        return fetch(links, options).then(function (response) {\n          return response.json();\n        }).then(function (responseData) {\n          return Promise.resolve(responseData);\n        });\n      } catch (err) {\n        return err;\n      }\n    }\n  }, {\n    key: \"createSpace\",\n    value: function createSpace(bodysend) {\n      // example bodysend\n      // let dimension = Array();\n      // dimension = {\n      //   width: 10,\n      //   length: 10,\n      //   height: 10\n      // };\n      // let bodysend = Array();\n      // bodysend = {\n      //   type: \"MIS02\",\n      //   dimension: dimension,\n      //   desc: \"Space description\",\n      //   status: true,\n      //   comment: \"\",\n      //   image: \"\"\n      // };\n      try {\n        var pathname = \"/space/createSpace\";\n        var options = {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            user: this.user,\n            secret: this.GetSecretUpdate(),\n            jobid: this.jobid\n          },\n          body: JSON.stringify(bodysend)\n        };\n        var links = this.IPAdress + \":\" + this.PortAddress + pathname;\n        return fetch(links, options).then(function (response) {\n          return response.json();\n        }).then(function (responseData) {\n          return Promise.resolve(responseData);\n        });\n      } catch (err) {\n        return err;\n      }\n    }\n  }, {\n    key: \"willUpdateSpace\",\n    value: function willUpdateSpace(id) {\n      // example id=\"5d6c9f2158e7bb04419db474\"\n      try {\n        var pathname = \"/space/willUpdateSpace?id=\" + id;\n        var options = {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            user: this.user,\n            secret: this.GetSecretUpdate(),\n            jobid: this.jobid // body: []\n\n          }\n        };\n        var links = this.IPAdress + \":\" + this.PortAddress + pathname;\n        return fetch(links, options).then(function (response) {\n          return response.json();\n        }).then(function (responseData) {\n          return Promise.resolve(responseData);\n        });\n      } catch (err) {\n        return err;\n      }\n    }\n  }, {\n    key: \"updateSpace\",\n    value: function updateSpace(bodysend) {\n      // example bodysend\n      // let dimension = Array();\n      // dimension = {\n      //   width: 10,\n      //   length: 10,\n      //   height: 10\n      // };\n      // let bodysend = Array();\n      // bodysend = {\n      //   type: \"MIS02\",\n      //   dimension: dimension,\n      //   desc: \"Space description\",\n      //   status: true,\n      //   comment: \"\",\n      //   image: \"\"\n      // };\n      try {\n        var pathname = \"/space/updateSpace\";\n        var options = {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            user: this.user,\n            secret: this.GetSecretUpdate(),\n            jobid: this.jobid\n          },\n          body: JSON.stringify(bodysend)\n        };\n        var links = this.IPAdress + \":\" + this.PortAddress + pathname;\n        return fetch(links, options).then(function (response) {\n          return response.json();\n        }).then(function (responseData) {\n          return Promise.resolve(responseData);\n        });\n      } catch (err) {\n        return err;\n      }\n    } // LOCATION\n\n  }, {\n    key: \"searchLocation\",\n    value: function searchLocation(params) {\n      // example\n      // let params  = Array();\n      // params = {\n      //   // name:\"MIS\",\n      //   shelf:\"000\",\n      //   type:\"def\",\n      //   volumn:2001,\n      //   isHigh:false,\n      //   heavyLoad:false,\n      //   status:true,\n      // };\n      try {\n        var pathname = \"/location/searchLocation?\";\n\n        if (typeof params.name != \"undefined\") {\n          pathname = pathname + \"name=\" + params.name + \"&\";\n        }\n\n        if (typeof params.shelf != \"undefined\") {\n          pathname = pathname + \"shelf=\" + params.shelf + \"&\";\n        }\n\n        if (typeof params.type != \"undefined\") {\n          pathname = pathname + \"space.type=\" + params.type + \"&\";\n        }\n\n        if (typeof params.volumn != \"undefined\") {\n          pathname = pathname + \"space.volumn=\" + params.volumn + \"&\";\n        }\n\n        if (typeof params.isHigh != \"undefined\") {\n          pathname = pathname + \"isHigh=\" + params.isHigh + \"&\";\n        }\n\n        if (typeof params.heavyLoad != \"undefined\") {\n          pathname = pathname + \"heavyLoad=\" + params.heavyLoad + \"&\";\n        }\n\n        if (typeof params.status != \"undefined\") {\n          pathname = pathname + \"status=\" + params.status + \"&\";\n        }\n\n        var options = {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            user: this.user,\n            secret: this.GetSecretUpdate(),\n            jobid: this.jobid // body: []\n\n          }\n        };\n        var links = this.IPAdress + \":\" + this.PortAddress + pathname;\n        return fetch(links, options).then(function (response) {\n          return response.json();\n        }).then(function (responseData) {\n          return Promise.resolve(responseData);\n        });\n      } catch (err) {\n        return err;\n      }\n    }\n  }, {\n    key: \"willCreateLocation\",\n    value: function willCreateLocation() {\n      try {\n        var pathname = \"/location/willCreateLocation\";\n        var options = {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            user: this.user,\n            secret: this.GetSecretUpdate(),\n            jobid: this.jobid // body: []\n\n          }\n        };\n        var links = this.IPAdress + \":\" + this.PortAddress + pathname;\n        return fetch(links, options).then(function (response) {\n          return response.json();\n        }).then(function (responseData) {\n          return Promise.resolve(responseData);\n        });\n      } catch (err) {\n        return err;\n      }\n    }\n  }, {\n    key: \"createLocation\",\n    value: function createLocation(bodysend) {\n      // example bodysend\n      // ตัวอย่างการสร้าง Params\n      // let bodysend = Array();\n      // let space = Array();\n      // space = {\n      //   space_id: \"5d6c9f2158e7bb04419db474\"\n      // };\n      // bodysend = {\n      //   name: \"JIB-MISTEST-0002\",\n      //   shelf: \"SID000-A00001\",\n      //   desc: \"MIS TEST STARTUP\",\n      //   space: space,\n      //   isHigh: false,\n      //   heavyLoad: false,\n      //   status: true\n      // };\n      try {\n        var pathname = \"/location/createLocation\";\n        var options = {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            user: this.user,\n            secret: this.GetSecretUpdate(),\n            jobid: this.jobid\n          },\n          body: JSON.stringify(bodysend)\n        };\n        var links = this.IPAdress + \":\" + this.PortAddress + pathname;\n        return fetch(links, options).then(function (response) {\n          return response.json();\n        }).then(function (responseData) {\n          return Promise.resolve(responseData);\n        });\n      } catch (err) {\n        return err;\n      }\n    }\n  }, {\n    key: \"willUpdateLocation\",\n    value: function willUpdateLocation(id) {\n      // example id=\"5d6cadbb58e7bb04419db475\"\n      try {\n        var pathname = \"/location/willUpdateLocation?id=\" + id;\n        var options = {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            user: this.user,\n            secret: this.GetSecretUpdate(),\n            jobid: this.jobid // body: []\n\n          }\n        };\n        var links = this.IPAdress + \":\" + this.PortAddress + pathname;\n        return fetch(links, options).then(function (response) {\n          return response.json();\n        }).then(function (responseData) {\n          return Promise.resolve(responseData);\n        });\n      } catch (err) {\n        return err;\n      }\n    }\n  }, {\n    key: \"updateLocation\",\n    value: function updateLocation(bodysend) {\n      // example bodysend\n      // ตัวอย่างการสร้าง Params\n      //  let bodysend = Array();\n      //  let filter = Array();\n      //  let space = Array();\n      //  let update = Array();\n      //  filter = {\n      //    _id: \"5d6cadbb58e7bb04419db475\"\n      //  };\n      //  space = {\n      //    space_id: \"5d6c9f2158e7bb04419db474\"\n      //  };\n      //  update = {\n      //    shelf: \"SID000-A00001\",\n      //    desc: \"MIS TEST STARTUP\",\n      //    space: space,\n      //    isHigh: false,\n      //    heavyLoad: false,\n      //    status: true\n      //  };\n      //  bodysend = {\n      //    filter: filter,\n      //    update: update,\n      //  };\n      try {\n        var pathname = \"/location/updateLocation\";\n        var options = {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            user: this.user,\n            secret: this.GetSecretUpdate(),\n            jobid: this.jobid\n          },\n          body: JSON.stringify(bodysend)\n        };\n        var links = this.IPAdress + \":\" + this.PortAddress + pathname;\n        return fetch(links, options).then(function (response) {\n          return response.json();\n        }).then(function (responseData) {\n          return Promise.resolve(responseData);\n        });\n      } catch (err) {\n        return err;\n      }\n    }\n  }]);\n\n  return ApiService;\n}();\n\nexport { ApiService as default };","map":{"version":3,"sources":["D:\\Work_Project\\ReactJs\\JIB-Quicktron\\src\\components\\actions\\apidata.js"],"names":["sha512","require","ApiService","GetSecretUpdate","bind","IPAdress","PortAddress","user","jobid","password","now","Date","day","getDate","slice","month","getMonth","years","getFullYear","hours","getHours","fullday","fullmath","secret","console","log","test","Array","connection","access","pathname","options","method","headers","body","JSON","stringify","links","fetch","then","response","json","responseData","Promise","resolve","err","params","type","status","volumn","bodysend","id","name","shelf","isHigh","heavyLoad"],"mappings":"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","sourcesContent":["var sha512 = require(\"js-sha512\");\r\nexport default class ApiService {\r\n  constructor() {\r\n    this.GetSecretUpdate = this.GetSecretUpdate.bind(this);\r\n    this.IPAdress = \"http://172.18.0.162\";\r\n    this.PortAddress = \"9500\";\r\n    this.user = \"jibmis\";\r\n    this.jobid = \"0123456789\";\r\n    this.password = \"JIBmis2020**\";\r\n  }\r\n  GetSecretUpdate() {\r\n    var now = new Date();\r\n    var day = (\"0\" + now.getDate()).slice(-2);\r\n    var month = (\"0\" + (now.getMonth() + 1)).slice(-2);\r\n    var years = now.getFullYear();\r\n    var hours = now.getHours();\r\n    var fullday = years + month + day + hours;\r\n    var fullmath = \"**JIB//\" + this.password + \"//\" + fullday + \"**\";\r\n    var secret = sha512(fullmath);\r\n    console.log(fullmath)\r\n    console.log(secret);\r\n    return secret;\r\n  }\r\n  AuthenTest() {\r\n    // example\r\n    let test = Array();\r\n    test = {\r\n      connection: true,\r\n      access: true\r\n    };\r\n    try {\r\n      var pathname = \"/authtest\";\r\n      var options = {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          user: this.user,\r\n          secret: this.GetSecretUpdate(),\r\n          jobid: this.jobid\r\n        },\r\n        body: JSON.stringify(test)\r\n      };\r\n      var links = this.IPAdress + \":\" + this.PortAddress + pathname;\r\n      return fetch(links, options)\r\n        .then(response => response.json())\r\n        .then(responseData => {\r\n          return Promise.resolve(responseData);\r\n        });\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  }\r\n  // SPACE\r\n  searchSpace(params) {\r\n    // example\r\n    // let params  = Array();\r\n    // params = {\r\n    //   type: \"MIS01\",\r\n    //   status: true,\r\n    //   volumn:100\r\n    // };\r\n    try {\r\n      var pathname = \"/space/searchSpace?\";\r\n      if (typeof params.type != \"undefined\") {\r\n        pathname = pathname + \"type=\" + params.type + \"&\";\r\n      }\r\n      if (typeof params.status != \"undefined\") {\r\n        pathname = pathname + \"status=\" + params.status + \"&\";\r\n      }\r\n      if (typeof params.volumn != \"undefined\") {\r\n        pathname = pathname + \"volumn=\" + params.volumn + \"&\";\r\n      }\r\n      var options = {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          user: this.user,\r\n          secret: this.GetSecretUpdate(),\r\n          jobid: this.jobid\r\n        }\r\n        // body: []\r\n      };\r\n      var links = this.IPAdress + \":\" + this.PortAddress + pathname;\r\n      return fetch(links, options)\r\n        .then(response => response.json())\r\n        .then(responseData => {\r\n          return Promise.resolve(responseData);\r\n        });\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  }\r\n  willCreateSpace() {\r\n    try {\r\n      var pathname = \"/space/willCreateSpace\";\r\n      var options = {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          user: this.user,\r\n          secret: this.GetSecretUpdate(),\r\n          jobid: this.jobid\r\n        }\r\n        // body: []\r\n      };\r\n      var links = this.IPAdress + \":\" + this.PortAddress + pathname;\r\n      return fetch(links, options)\r\n        .then(response => response.json())\r\n        .then(responseData => {\r\n          return Promise.resolve(responseData);\r\n        });\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  }\r\n  imageList() {\r\n    try {\r\n      var pathname = \"/space/image_list\";\r\n      var options = {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          user: this.user,\r\n          secret: this.GetSecretUpdate(),\r\n          jobid: this.jobid\r\n        }\r\n        // body: []\r\n      };\r\n      var links = this.IPAdress + \":\" + this.PortAddress + pathname;\r\n      return fetch(links, options)\r\n        .then(response => response.json())\r\n        .then(responseData => {\r\n          return Promise.resolve(responseData);\r\n        });\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  }\r\n  createSpace(bodysend) {\r\n    // example bodysend\r\n    // let dimension = Array();\r\n    // dimension = {\r\n    //   width: 10,\r\n    //   length: 10,\r\n    //   height: 10\r\n    // };\r\n    // let bodysend = Array();\r\n    // bodysend = {\r\n    //   type: \"MIS02\",\r\n    //   dimension: dimension,\r\n    //   desc: \"Space description\",\r\n    //   status: true,\r\n    //   comment: \"\",\r\n    //   image: \"\"\r\n    // };\r\n    try {\r\n      var pathname = \"/space/createSpace\";\r\n      var options = {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          user: this.user,\r\n          secret: this.GetSecretUpdate(),\r\n          jobid: this.jobid\r\n        },\r\n        body: JSON.stringify(bodysend)\r\n      };\r\n      var links = this.IPAdress + \":\" + this.PortAddress + pathname;\r\n      return fetch(links, options)\r\n        .then(response => response.json())\r\n        .then(responseData => {\r\n          return Promise.resolve(responseData);\r\n        });\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  }\r\n  willUpdateSpace(id) {\r\n    // example id=\"5d6c9f2158e7bb04419db474\"\r\n    try {\r\n      var pathname = \"/space/willUpdateSpace?id=\" + id;\r\n      var options = {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          user: this.user,\r\n          secret: this.GetSecretUpdate(),\r\n          jobid: this.jobid\r\n        }\r\n        // body: []\r\n      };\r\n      var links = this.IPAdress + \":\" + this.PortAddress + pathname;\r\n      return fetch(links, options)\r\n        .then(response => response.json())\r\n        .then(responseData => {\r\n          return Promise.resolve(responseData);\r\n        });\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  }\r\n  updateSpace(bodysend) {\r\n    // example bodysend\r\n    // let dimension = Array();\r\n    // dimension = {\r\n    //   width: 10,\r\n    //   length: 10,\r\n    //   height: 10\r\n    // };\r\n    // let bodysend = Array();\r\n    // bodysend = {\r\n    //   type: \"MIS02\",\r\n    //   dimension: dimension,\r\n    //   desc: \"Space description\",\r\n    //   status: true,\r\n    //   comment: \"\",\r\n    //   image: \"\"\r\n    // };\r\n    try {\r\n      var pathname = \"/space/updateSpace\";\r\n      var options = {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          user: this.user,\r\n          secret: this.GetSecretUpdate(),\r\n          jobid: this.jobid\r\n        },\r\n        body: JSON.stringify(bodysend)\r\n      };\r\n      var links = this.IPAdress + \":\" + this.PortAddress + pathname;\r\n      return fetch(links, options)\r\n        .then(response => response.json())\r\n        .then(responseData => {\r\n          return Promise.resolve(responseData);\r\n        });\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  }\r\n  // LOCATION\r\n  searchLocation(params) {\r\n    // example\r\n    // let params  = Array();\r\n    // params = {\r\n    //   // name:\"MIS\",\r\n    //   shelf:\"000\",\r\n    //   type:\"def\",\r\n    //   volumn:2001,\r\n    //   isHigh:false,\r\n    //   heavyLoad:false,\r\n    //   status:true,\r\n    // };\r\n    try {\r\n      var pathname = \"/location/searchLocation?\";\r\n      if (typeof params.name != \"undefined\") {\r\n        pathname = pathname + \"name=\" + params.name + \"&\";\r\n      }\r\n      if (typeof params.shelf != \"undefined\") {\r\n        pathname = pathname + \"shelf=\" + params.shelf + \"&\";\r\n      }\r\n      if (typeof params.type != \"undefined\") {\r\n        pathname = pathname + \"space.type=\" + params.type + \"&\";\r\n      }\r\n      if (typeof params.volumn != \"undefined\") {\r\n        pathname = pathname + \"space.volumn=\" + params.volumn + \"&\";\r\n      }\r\n      if (typeof params.isHigh != \"undefined\") {\r\n        pathname = pathname + \"isHigh=\" + params.isHigh + \"&\";\r\n      }\r\n      if (typeof params.heavyLoad != \"undefined\") {\r\n        pathname = pathname + \"heavyLoad=\" + params.heavyLoad + \"&\";\r\n      }\r\n      if (typeof params.status != \"undefined\") {\r\n        pathname = pathname + \"status=\" + params.status + \"&\";\r\n      }\r\n      var options = {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          user: this.user,\r\n          secret: this.GetSecretUpdate(),\r\n          jobid: this.jobid\r\n        }\r\n        // body: []\r\n      };\r\n      var links = this.IPAdress + \":\" + this.PortAddress + pathname;\r\n      return fetch(links, options)\r\n        .then(response => response.json())\r\n        .then(responseData => {\r\n          return Promise.resolve(responseData);\r\n        });\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  }\r\n  willCreateLocation() {\r\n    try {\r\n      var pathname = \"/location/willCreateLocation\";\r\n      var options = {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          user: this.user,\r\n          secret: this.GetSecretUpdate(),\r\n          jobid: this.jobid\r\n        }\r\n        // body: []\r\n      };\r\n      var links = this.IPAdress + \":\" + this.PortAddress + pathname;\r\n      return fetch(links, options)\r\n        .then(response => response.json())\r\n        .then(responseData => {\r\n          return Promise.resolve(responseData);\r\n        });\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  }\r\n  createLocation(bodysend) {\r\n    // example bodysend\r\n    // ตัวอย่างการสร้าง Params\r\n    // let bodysend = Array();\r\n    // let space = Array();\r\n    // space = {\r\n    //   space_id: \"5d6c9f2158e7bb04419db474\"\r\n    // };\r\n    // bodysend = {\r\n    //   name: \"JIB-MISTEST-0002\",\r\n    //   shelf: \"SID000-A00001\",\r\n    //   desc: \"MIS TEST STARTUP\",\r\n    //   space: space,\r\n    //   isHigh: false,\r\n    //   heavyLoad: false,\r\n    //   status: true\r\n    // };\r\n    try {\r\n      var pathname = \"/location/createLocation\";\r\n      var options = {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          user: this.user,\r\n          secret: this.GetSecretUpdate(),\r\n          jobid: this.jobid\r\n        },\r\n        body: JSON.stringify(bodysend)\r\n      };\r\n      var links = this.IPAdress + \":\" + this.PortAddress + pathname;\r\n      return fetch(links, options)\r\n        .then(response => response.json())\r\n        .then(responseData => {\r\n          return Promise.resolve(responseData);\r\n        });\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  }\r\n  willUpdateLocation(id) {\r\n    // example id=\"5d6cadbb58e7bb04419db475\"\r\n    try {\r\n      var pathname = \"/location/willUpdateLocation?id=\" + id;\r\n      var options = {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          user: this.user,\r\n          secret: this.GetSecretUpdate(),\r\n          jobid: this.jobid\r\n        }\r\n        // body: []\r\n      };\r\n      var links = this.IPAdress + \":\" + this.PortAddress + pathname;\r\n      return fetch(links, options)\r\n        .then(response => response.json())\r\n        .then(responseData => {\r\n          return Promise.resolve(responseData);\r\n        });\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  }\r\n  updateLocation(bodysend) {\r\n    // example bodysend\r\n    // ตัวอย่างการสร้าง Params\r\n    //  let bodysend = Array();\r\n    //  let filter = Array();\r\n    //  let space = Array();\r\n    //  let update = Array();\r\n    //  filter = {\r\n    //    _id: \"5d6cadbb58e7bb04419db475\"\r\n    //  };\r\n    //  space = {\r\n    //    space_id: \"5d6c9f2158e7bb04419db474\"\r\n    //  };\r\n    //  update = {\r\n    //    shelf: \"SID000-A00001\",\r\n    //    desc: \"MIS TEST STARTUP\",\r\n    //    space: space,\r\n    //    isHigh: false,\r\n    //    heavyLoad: false,\r\n    //    status: true\r\n    //  };\r\n    //  bodysend = {\r\n    //    filter: filter,\r\n    //    update: update,\r\n    //  };\r\n    try {\r\n      var pathname = \"/location/updateLocation\";\r\n      var options = {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          user: this.user,\r\n          secret: this.GetSecretUpdate(),\r\n          jobid: this.jobid\r\n        },\r\n        body: JSON.stringify(bodysend)\r\n      };\r\n      var links = this.IPAdress + \":\" + this.PortAddress + pathname;\r\n      return fetch(links, options)\r\n        .then(response => response.json())\r\n        .then(responseData => {\r\n          return Promise.resolve(responseData);\r\n        });\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}